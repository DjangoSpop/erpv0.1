// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using erpv0._1.Data;

#nullable disable

namespace erpv0._1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250222140327_intial")]
    partial class intial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("erpv0._1.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("brand_name");

                    b.HasKey("BrandId")
                        .HasName("PK__brands__5E5A8E27DF49EE5C");

                    b.ToTable("brands", "production");
                });

            modelBuilder.Entity("erpv0._1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("zip_code");

                    b.HasKey("CustomerId")
                        .HasName("PK__customer__CD65CB85F0EB750F");

                    b.ToTable("customers", "sales");
                });

            modelBuilder.Entity("erpv0._1.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceNo")
                        .HasColumnType("int")
                        .HasColumnName("invoice_no");

                    b.Property<DateOnly?>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoice_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("notes");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.HasKey("InvoiceNo")
                        .HasName("PK__Invoices__F58CA1E3318C8D40");

                    b.HasIndex("OrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoices", "Purchases");
                });

            modelBuilder.Entity("erpv0._1.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("order_status");

                    b.Property<DateOnly>("RequiredDate")
                        .HasColumnType("date")
                        .HasColumnName("required_date");

                    b.Property<DateOnly?>("ShippedDate")
                        .HasColumnType("date")
                        .HasColumnName("shipped_date");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.HasKey("OrderId")
                        .HasName("PK__orders__465962295D0344EE");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("orders", "sales");
                });

            modelBuilder.Entity("erpv0._1.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("discount");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("list_price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ItemId")
                        .HasName("PK__order_it__837942D4D41A47A3");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items", "sales");
                });

            modelBuilder.Entity("erpv0._1.Models.Payment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .HasColumnType("int")
                        .HasColumnName("shipment_id");

                    b.Property<int?>("InvoiceNo")
                        .HasColumnType("int")
                        .HasColumnName("invoice_no");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<DateOnly?>("ShipmentDate")
                        .HasColumnType("date")
                        .HasColumnName("shipment_date");

                    b.Property<string>("ShipmentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipment_method");

                    b.Property<string>("ShipmentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipment_status");

                    b.HasKey("ShipmentId")
                        .HasName("PK__Payment__41466E59BB412024");

                    b.HasIndex("InvoiceNo");

                    b.ToTable("Payment", "Purchases");
                });

            modelBuilder.Entity("erpv0._1.Models.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__PriceHis__3214EC07A283209B");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "EffectiveDate" }, "IX_PriceHistory_EffectiveDate");

                    b.ToTable("PriceHistory", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("list_price");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint")
                        .HasColumnName("model_year");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId")
                        .HasName("PK__products__47027DF53DF9F473");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "ProductName" }, "IX_Product_Name");

                    b.ToTable("products", "production");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__ProductC__19093A0B066EDDDC");

                    b.ToTable("ProductCategory", "production");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__ProductT__3214EC0700D40C59");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "Language" }, "IX_ProductTranslation_Language");

                    b.ToTable("ProductTranslation", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductVariant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VariantId")
                        .HasName("PK__ProductV__0EA2338446890398");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductVariant_ProductId");

                    b.ToTable("ProductVariant", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint")
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("phone");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.HasKey("StaffId")
                        .HasName("PK__staffs__1963DD9CF3FDC3B6");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Email" }, "UQ__staffs__AB6E6164A69EC0CF")
                        .IsUnique();

                    b.ToTable("staffs", "sales");
                });

            modelBuilder.Entity("erpv0._1.Models.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("StoreId", "ProductId")
                        .HasName("PK__stocks__E68284D33A63CFB0");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks", "production");
                });

            modelBuilder.Entity("erpv0._1.Models.StockEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("MaxDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<int?>("ProductVariantVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SupplierInvoice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("EntryId")
                        .HasName("PK__StockEnt__F57BD2F741B063C1");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantVariantId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "BatchNumber" }, "IX_StockEntry_BatchNumber");

                    b.ToTable("StockEntry", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.StockMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("int");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MovementId")
                        .HasName("PK__StockMov__D1822446A9F704B9");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockEntryId");

                    b.HasIndex("TransferId");

                    b.HasIndex(new[] { "MovementDate" }, "IX_StockMovement_MovementDate");

                    b.ToTable("StockMovement", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("state");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("store_name");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("zip_code");

                    b.HasKey("StoreId")
                        .HasName("PK__stores__A2F2A30C1290FE1F");

                    b.ToTable("stores", "sales");
                });

            modelBuilder.Entity("erpv0._1.Models.SubOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateOnly?>("FulfilledDate")
                        .HasColumnType("date")
                        .HasColumnName("fulfilled_date");

                    b.Property<DateOnly?>("PlacedDate")
                        .HasColumnType("date")
                        .HasColumnName("placed_date");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.HasKey("OrderId")
                        .HasName("PK__sub_Orde__4659622948A1A9C0");

                    b.HasIndex("StaffId");

                    b.ToTable("sub_Orders", "Purchases");
                });

            modelBuilder.Entity("erpv0._1.Models.SubOrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId")
                        .HasName("PK__sub_Orde__3764B6BC046D8F72");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("sub_Order_Items", "Purchases");
                });

            modelBuilder.Entity("erpv0._1.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__6EE594E8F77D27BF");

                    b.ToTable("Suppliers", "Purchases");
                });

            modelBuilder.Entity("erpv0._1.Models.SystemSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultTaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("EnableAuditLog")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("erpv0._1.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WarehouseId")
                        .HasName("PK__Warehous__2608AFF91A845B36");

                    b.HasIndex(new[] { "Code" }, "IX_Warehouse_Code");

                    b.HasIndex(new[] { "Code" }, "UQ_Warehouse_Code")
                        .IsUnique();

                    b.ToTable("Warehouse", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.WarehouseTransfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DestWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SourceWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TransferId")
                        .HasName("PK__Warehous__95490091D8707CFF");

                    b.HasIndex("DestWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex(new[] { "Status" }, "IX_WarehouseTransfer_Status");

                    b.ToTable("WarehouseTransfer", "inventory");
                });

            modelBuilder.Entity("erpv0._1.Models.Invoice", b =>
                {
                    b.HasOne("erpv0._1.Models.SubOrder", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_invoice_order");

                    b.HasOne("erpv0._1.Models.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Invoices__suppli__282DF8C2");

                    b.Navigation("Order");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("erpv0._1.Models.Order", b =>
                {
                    b.HasOne("erpv0._1.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__orders__customer__03F0984C");

                    b.HasOne("erpv0._1.Models.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__orders__staff_id__04E4BC85");

                    b.HasOne("erpv0._1.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__orders__store_id__05D8E0BE");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("erpv0._1.Models.OrderItem", b =>
                {
                    b.HasOne("erpv0._1.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_ite__order__02084FDA");

                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__product_category");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erpv0._1.Models.Payment", b =>
                {
                    b.HasOne("erpv0._1.Models.Invoice", "InvoiceNoNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceNo")
                        .HasConstraintName("fk_invoice_payment");

                    b.Navigation("InvoiceNoNavigation");
                });

            modelBuilder.Entity("erpv0._1.Models.PriceHistory", b =>
                {
                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PriceHistory_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erpv0._1.Models.Product", b =>
                {
                    b.HasOne("erpv0._1.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__products__brand___787EE5A0");

                    b.HasOne("erpv0._1.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_products_ProductCategory");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductTranslation", b =>
                {
                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTranslation_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductVariant", b =>
                {
                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVariant_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erpv0._1.Models.Staff", b =>
                {
                    b.HasOne("erpv0._1.Models.Staff", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__staffs__manager___06CD04F7");

                    b.HasOne("erpv0._1.Models.Store", "Store")
                        .WithMany("Staff")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__staffs__store_id__07C12930");

                    b.Navigation("Manager");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("erpv0._1.Models.Stock", b =>
                {
                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__stocks__product___7A672E12");

                    b.HasOne("erpv0._1.Models.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__stocks__store_id__7B5B524B");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("erpv0._1.Models.StockEntry", b =>
                {
                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("StockEntries")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_StockEntry_Product");

                    b.HasOne("erpv0._1.Models.ProductVariant", "ProductVariantVariant")
                        .WithMany("StockEntries")
                        .HasForeignKey("ProductVariantVariantId")
                        .HasConstraintName("FK_StockEntry_ProductVariant");

                    b.HasOne("erpv0._1.Models.Warehouse", "Warehouse")
                        .WithMany("StockEntries")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_StockEntry_Warehouse");

                    b.Navigation("Product");

                    b.Navigation("ProductVariantVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("erpv0._1.Models.StockMovement", b =>
                {
                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_StockMovement_Product");

                    b.HasOne("erpv0._1.Models.StockEntry", "StockEntry")
                        .WithMany("StockMovements")
                        .HasForeignKey("StockEntryId")
                        .IsRequired()
                        .HasConstraintName("FK_StockMovement_StockEntry");

                    b.HasOne("erpv0._1.Models.WarehouseTransfer", "Transfer")
                        .WithMany("StockMovements")
                        .HasForeignKey("TransferId")
                        .HasConstraintName("FK_StockMovement_Transfer");

                    b.Navigation("Product");

                    b.Navigation("StockEntry");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("erpv0._1.Models.SubOrder", b =>
                {
                    b.HasOne("erpv0._1.Models.Staff", "Staff")
                        .WithMany("SubOrders")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__sub_Order__staff__01142BA1");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("erpv0._1.Models.SubOrderItem", b =>
                {
                    b.HasOne("erpv0._1.Models.SubOrder", "Order")
                        .WithMany("SubOrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_sub_Order_Orders");

                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("SubOrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__sub_Order__product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erpv0._1.Models.WarehouseTransfer", b =>
                {
                    b.HasOne("erpv0._1.Models.Warehouse", "DestWarehouse")
                        .WithMany("WarehouseTransferDestWarehouses")
                        .HasForeignKey("DestWarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTransfer_DestWarehouse");

                    b.HasOne("erpv0._1.Models.Product", "Product")
                        .WithMany("WarehouseTransfers")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTransfer_Product");

                    b.HasOne("erpv0._1.Models.Warehouse", "SourceWarehouse")
                        .WithMany("WarehouseTransferSourceWarehouses")
                        .HasForeignKey("SourceWarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTransfer_SourceWarehouse");

                    b.Navigation("DestWarehouse");

                    b.Navigation("Product");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("erpv0._1.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("erpv0._1.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("erpv0._1.Models.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("erpv0._1.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("erpv0._1.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PriceHistories");

                    b.Navigation("ProductTranslations");

                    b.Navigation("ProductVariants");

                    b.Navigation("StockEntries");

                    b.Navigation("StockMovements");

                    b.Navigation("Stocks");

                    b.Navigation("SubOrderItems");

                    b.Navigation("WarehouseTransfers");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("erpv0._1.Models.ProductVariant", b =>
                {
                    b.Navigation("StockEntries");
                });

            modelBuilder.Entity("erpv0._1.Models.Staff", b =>
                {
                    b.Navigation("InverseManager");

                    b.Navigation("Orders");

                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("erpv0._1.Models.StockEntry", b =>
                {
                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("erpv0._1.Models.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Staff");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("erpv0._1.Models.SubOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SubOrderItems");
                });

            modelBuilder.Entity("erpv0._1.Models.Supplier", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("erpv0._1.Models.Warehouse", b =>
                {
                    b.Navigation("StockEntries");

                    b.Navigation("WarehouseTransferDestWarehouses");

                    b.Navigation("WarehouseTransferSourceWarehouses");
                });

            modelBuilder.Entity("erpv0._1.Models.WarehouseTransfer", b =>
                {
                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
